{
    "injectionSelector": "L:comment.block.documentation.c",
    "scopeName": "doxytags",

    "patterns": [
        {
            "match": "[@\\\\](note|file|details|short|since|test|brief|returns?|warning|todo|dir|static|authors?|attention|bug|copyright|date|deprecated|invariant|par|parblock|endparblock|remarks|result|version|secreflist|endsecreflist|tableofcontents|arg|manonly|htmlonly|endhtmlonly|rtfonly|endrtfonly|latexonly|endlatexonly|xml|xmlonly|n|internal|endlink|endcond)\\b",
            "name": "meta.preprocessor.macro.c"
        },
        {
            "match": "\\b(true|false|NULL)\\b",
            "name": "constant.language.c"
        },
        {
            "begin": "[@\\\\](?:ref|class|enum|union|struct)",
            "end": "([\\w()\\.:\\->]+)",
            "beginCaptures": {
                "0": {
                    "name": "meta.preprocessor.macro.c"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "variable"
                }
            }
        },
        {
            "begin": "([@\\\\](?:sa|see))",
            "end": "([\\w()\\.:\\->]+)\\b(?!,)",
            "beginCaptures": {
                "1": {
                    "name": "meta.preprocessor.macro.c"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "variable"
                }
            },
            "patterns": [
                {
                    "match": "([\\w()\\.:\\->]+),",
                    "captures": {
                        "1": {
                            "name": "variable"
                        }
                    }
                }
            ]
        },
        {
            "match": "[@\\\\]t?param(\\[(in|out|in,out)\\])?\\s+(\\S+)",
            "name": "meta.preprocessor.macro.c",
            "captures": {
                "1": {
                    "name": "meta.preprocessor.macro.c"
                },
                "2": {
                    "name": "variable"
                },
                "3": {
                    "name": "variable"
                }
            }
        },
        {
            "match": "([@\\\\](?:retval))\\s+([\\w()\\.:\\->]+)",
            "captures": {
                "1": {
                    "name": "meta.preprocessor.macro.c"
                },
                "2": {
                    "name": "variable"
                }
            }
        },
        {
            "begin": "[@\\\\](subpage|subsection|section|subsubsection|var|fn|typedef|property|exception|throws?|anchor|cite|link|refitem|include|dontinclude|includelineno|includedoc|line|skip|skipline|snippet|snippetlineno|snippetdoc|until|verbinclude|htmlinclude|latexinclude|copydoc|copybrief|copydetails|emoji|dotfile|mscfile|diafile|li|def|cond|defgroup|ingroup|addtogroup|weakgroup|c|b)\\b",
            "end": "[\\w0-9()\\.:\\->]+",
            "beginCaptures": {
                "0": {
                    "name": "meta.preprocessor.macro.c"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "variable"
                }
            }
        },
        {
            "begin": "[@\\\\](a|e|em)\\b",
            "end": "[\\w()\\.:\\->]+",
            "beginCaptures":{
                "0": {
                    "name":"meta.preprocessor.macro.c"
                }
            },
            "endCaptures": {
                "0": {
                    "name":"markup.italic"
                }
            }
        },
        {
            "begin": "[@\\\\]b\\b",
            "end": "[\\w()\\.:\\->]+",
            "beginCaptures":{
                "0": {
                    "name":"meta.preprocessor.macro.c"
                }
            },
            "endCaptures": {
                "0": {
                    "name":"markup.bold"
                }
            }
        },
        {
            "match": "`.+?`",
            "name": "variable"
        },
        {
            "match": "[^a-zA-Z]\\b(0x[0-9a-fA-F]+|0b[01]+|[+-]?[0-9]+(\\.[0-9]+)*f?)\\b",
            "captures":{
                "1": {
                    "name": "constant.numeric"
                }
            }
        },
        {
            "match": "[@\\\\][\\{\\}]",
            "name": "meta.preprocessor.macro.c"
        },
        {
            "begin": "[@\\\\](code|verbatim)({([^}]+)})?",
            "end": "[@\\\\]end(code|verbatim)",
            "name": "meta.preprocessor.macro.c",
            "captures": {
                "3": {
                    "name": "variable"
                }
            },
            "patterns": [
                {
                    "match": "^\\s?\\*",
                    "name": "comment.block.c"
                },
                {
                    "include": "source.c"
                }
            ]
        },
        {
            "begin": "[@\\\\]msc",
            "end": "[@\\\\]endmsc",
            "name": "meta.preprocessor.macro.c",
            "patterns": [
                {
                    "match": "^\\s?\\*",
                    "name": "comment.block.c"
                },
                {
                    "include": "source.mscgen"
                }
            ]
        },
        {
            "begin": "[@\\\\]dot",
            "end": "[@\\\\]enddot",
            "name": "meta.preprocessor.macro.c",
            "patterns": [
                {
                    "match": "^\\s?\\*",
                    "name": "comment.block.c"
                },
                {
                    "include": "source.dot"
                }
            ]
        },
        {
            "begin": "[@\\\\]uml({([^}]+)})?",
            "end": "[@\\\\]enduml",
            "name": "meta.preprocessor.macro.c",
            "captures": {
                "3": {
                    "name": "variable"
                }
            },
            "patterns": [
                {
                    "match": "^\\s?\\*",
                    "name": "comment.block.c"
                },
                {
                    "include": "source.uml"
                }
            ]
        }
    ]
}
